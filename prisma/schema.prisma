// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  role          Role     @default(USER)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  title       String?
  description String?
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  media       Media[]     @relation(references: [id])
  comments    Comment[]
}

model Media {
  id   String   @id @default(cuid())
  type String
  url  String
  posts Post[]  @relation(references: [id])
}

model Comment {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  content     String
  post        Post        @relation(fields: [postId], references: [id])
  postId      String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
}

enum Role {
  USER
  ADMIN
}



